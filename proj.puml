@startuml

Abstract class Tile {
}


Tile <|-- SpecialTile
abstract class SpecialTile {
	+effect()
}

Tile <|-- ColoredTile
class ColoredTile {
	-Colors color
	+Colors getColor()
}

SpecialTile <|-- FirstTile
class FirstTile

Colors --* ColoredTile : "intern enum"
enum Colors {
	BLUE
	RED
	GREEN
	BLACK
	YELLOW
}


interface Area {
	+int size()
	+boolean isEmpty()
	+boolean moveTilesTo(Area area)
}
Area <|-- UnindexedArea
interface UnindexedArea {
	+void add(Tile tile)
}

Area <|-- IndexedArea
interface IndexedArea {
	+void add(int index, Tile tile)
}

UnindexedArea <|.. OffSideArea
abstract class OffSideArea {
	-ArrayList<Tile> tiles
}

OffSideArea <|-- Bag
class Bag {
	+void refill(Trash trash)
}

OffSideArea <|-- Trash
class Trash {

}
UnindexedArea <|.. CommonArea
abstract class CommonArea {
	- Collection<Tile> tiles
}
CommonArea <|-- CenterArea
CommonArea <|-- Factory
class Factory {
	+void fill(Bag bag)
}

abstract class PlayerArea

IndexedArea <|.. Wall
PlayerArea <|-- Wall
class Wall {
	-ArrayList<ArrayList<Tile>> tiles
}

UnindexedArea <|.. Floor
PlayerArea <|-- Floor
class Floor {
	-ArrayList<Tile> tiles
}

IndexedArea <|.. PatternArea
PlayerArea <|-- PatternArea
class PatternArea{
	-ArrayList<ArrayList<Tile>> tiles
}

abstract class Player {
	Stat stats
	PlayerBoard playerBoard
}

Stat  --* Player : "intern class"
class Stat {
	int totalScore
	int[] perRoundScore
	String name
	boolean isHuman
}

Player <|-- HumanPlayer
Player <|-- AIPlayer


class PlayerBoard
PlayerBoard --* Player : "intern class"


GameConfiguration -left-* Game : "intern class"
class GameConfiguration {
	-int nbOfPlayers
	-AIDifficulty
	+void saveTo(File f)
	+void loadFrom(File f)
}

Game --> Round : "observes"
class Game {
	-GameConfiguration config
	-ArrayList<Player> players
	-GameBoard board	
	-Round round
	-Player winner
	+Game(File gameConfig)
	+void play()
	+void shutdown()
}

Game --> GameBoard : "init"
GameBoard --* Game : "intern class"
class GameBoard {	
	-Bag bag
	-Trash trash
	-ArrayList<Factory> factories
	-CenterArea center
	+GameBoard(int nbOfPlayers)
	-initFactories(int nbOfPlayers)
}

Round --> PlayerBoard : "observes"
class PlayerBoard {
	-Wall playerWall
	-Floor playerFloor
	-PatternArea playerPatternArea
}

class Round {
	-CircularLinkedList<Player> players
	+Round(List<Player> players, Player firstPlayer)
	+preparationPhase()
	+offerPhase()
	+decorationPhase()
}


App --> Game : "calls"
class App {
	+void main(String[] args)
}


@enduml
